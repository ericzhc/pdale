/*
*********************************************************************************************************
*                                               uC/HTTPs
*                                 HyperText Transfer Protocol (server)
*
*                          (c) Copyright 2003-2006; Micrium, Inc.; Weston, FL
*
*                   All rights reserved.  Protected by international copyright laws.
*                   Knowledge of the source code may not be used to write a similar
*                   product.  This file may only be used in accordance with a license
*                   and should not be redistributed in any way.
*********************************************************************************************************
*/

/*
*********************************************************************************************************
*
*                                              HTTP SERVER
*
* Filename      : http-s.h
* Version       : V1.85
* Programmer(s) : JDH
*********************************************************************************************************
*
*  This server is designed to work well with an embedded system that does not have PERL and the other
*  "niceties" that are on a larger UNIX or NT server environment.  GET and POST requests are supported.
*
*  For GET, if the string is "GET / ", then index.htm is the response, if the string is "GET /FileName",
*  then that file is used as the response.  If the file suffix is .htm or .html, then the server will
*  parse the file prior to sending it to the client.  If the syntax ${TEXT_STRING} is found within the
*  file, then the string TEXT_STRING is passed to an application-specific function and the all characters
*  from the opening '$' to the closing '}' are omitted and replaced with whatever the application-
*  specific code wants to replace it with.
*
*  For POST, (generated by the HTML "form" submission), the input is assumed to be formatted as
*  "POST /action" where 'action' defines what the server is to do with the next incoming TCP stream. This
*  next stream is the data entered through the user interface presented by the HTML file that contains
*  the form mechanism (the cgi name/value pairs).  It can simply be an HTML file that is processed in the
*  same way as was discussed above for the GET command.
*
*  Now a simple example of the above discussion.
*  Assume we have a file called myip.htm on the target that looks like this:
*
*  <html><body><center>
*  This system's IP address is ${My_IP_Address}
*  </center></body></html>
*
*  When a client attaches to this server and requests (via GET) myip.htm, the server will parse the file,
*  find the ${My_IP_Address} syntax and pass the string "My_IP_Address" into an application specific
*  function called HTTPs_ValRx().  That function will then build a replacement text string that the
*  server will give to the client in place of the ${My_IP_Address} text.  The file seen by the client
*  would look something like this:
*
*  <html><body><center>
*  This system's IP address is 135.17.115.215
*  </center></body></html>
*
*  Similarly, if the action of a form is a .htm file, the server will first parse the incoming name/value
*  list and pass each name value pair into an app-specific function called HTTPs_ValRx() to allow the
*  application to properly parse the data entered by the user of the client.  Then the HTML file
*  specified as the action will be processed as discussed above and sent to the client.
*
*  Note that this server does not define any syntax within the ${}.  This is 100% application-specific
*  and can be used for simple variable name conversion or something more elaborate if necessary.
*
*********************************************************************************************************
*/

#ifndef  __HTTP_S_H__
#define  __HTTP_S_H__


/*
*********************************************************************************************************
*                                                DEFINES
*********************************************************************************************************
*/

                                                                /* ---- HTTPs Module Configuration -------------------- */
#define  HTTPs_CONN_Q_SIZE                                 3
#define  HTTPs_MAX_PKT_SIZE                             1024

#define  HTTPs_TOKEN_VAR_START                  "${"
#define  HTTPs_TOKEN_VAR_STOP                   "}"
#define  HTTP_TOKEN_HEAD_START                  "<HEAD"
#define  HTTP_TOKEN_HEAD_STOP                   "</HEAD>"

                                                                /* ---- HTTP Version Definitions ---------------------- */
#define  HTTP_VER_UNSUPPORTED                              0
#define  HTTP_VER_09                                       1
#define  HTTP_VER_10                                       2
#define  HTTP_VER_11                                       3

                                                                /* ---- HTTP Incoming Methods Defenitions ------------- */
#define  HTTP_METHOD_UNSUPPORTED                           0
#define  HTTP_METHOD_GET                                   1
#define  HTTP_METHOD_HEAD                                  2
#define  HTTP_METHOD_POST                                  3

                                                                /* ---- HTTP Status Definitions ----------------------- */
#define  HTTP_STATUS_OK                                    0
#define  HTTP_STATUS_CREATED                               1
#define  HTTP_STATUS_ACCEPTED                              2
#define  HTTP_STATUS_NO_CONTENT                            3
#define  HTTP_STATUS_MOVED_PERMANENTLY                     4
#define  HTTP_STATUS_MOVED_TEMPORARILY                     5
#define  HTTP_STATUS_NOT_MODIFIED                          6
#define  HTTP_STATUS_BAD_REQUEST                           7
#define  HTTP_STATUS_UNAUTHORIZED                          8
#define  HTTP_STATUS_FORBIDDEN                             9
#define  HTTP_STATUS_NOT_FOUND                            10
#define  HTTP_STATUS_INTERNAL_SERVER_ERROR                11
#define  HTTP_STATUS_NOT_IMPLEMENTED                      12
#define  HTTP_STATUS_BAD_GATEWAY                          13
#define  HTTP_STATUS_SERVICE_UNAVAILABLE                  14

                                                                /* ---- HTTP Messages --------------------------------- */
#define  HTTPs_HTTP_HEADER_FMT                  "%s %d %s\r\n" \
                                                "Content-Type: %s\r\n" \
                                                "Content-Length: %d\r\n" \
                                                "\r\n"


/*
*********************************************************************************************************
*                                              DATA TYPES
*********************************************************************************************************
*/

                                                                /* HTTP_Status[]:                                       */
                                                                /* Status Code and Reason Phrase table (taken from      */
                                                                /* RFC2068).  This array is indexed by the              */
                                                                /* HTTP_STATUS_YYY values.                              */
typedef  struct  HTTPs_StatusStruct {
    CPU_INT32U   Code;
    CPU_CHAR    *Reason;
} HTTPs_STATUS_STRUCT;

                                                                /* HTTPs_MimeType[]:                                    */
                                                                /* Mapping between some popular web file extensions and */
                                                                /* their Mime Types.  Other types can be added.  The    */
                                                                /* NULL element at the end of the list MUST remain the  */
                                                                /* last element.                                        */
typedef  struct  HTTPs_MimeTypeStruct {
    CPU_CHAR  *FileExt;
    CPU_CHAR  *MimeType;
} HTTPs_MIME_TYPE_STRUCT;

                                                                /* HTTPs_ConnInfo[]:                                    */
                                                                /* Stores the state of each HTTP connection.            */
typedef  struct  HTTPs_ConnInfo {
    CPU_INT32U     ConnNbr;                                     /* Connection number.                                   */
    CPU_INT32U     SockID;                                      /* Socket ID of connection.                             */
    CPU_INT32U     ClientVerNo;                                 /* Client HTTP version number.                          */
    CPU_CHAR       ClientVer[32];                               /* Client HTTP version string.                          */
    CPU_CHAR       ServerVer[32];                               /* Server HTTP version response string.                 */
    NET_SOCK_ADDR  ClientAddr;                                  /* Client socket information.                           */
} HTTPs_CONN_INFO;


/*
*********************************************************************************************************
*                                          FUNCTION PROTOTYPES
*********************************************************************************************************
*/

CPU_BOOLEAN  HTTPs_Init (void);
void         HTTPs_Task (void  *p_arg);


/*
*********************************************************************************************************
*                                          FUNCTION PROTOTYPES
*                               DEFINED IN USER'S APPLICATION (CALLBACKS)
*********************************************************************************************************
*/

/*
*********************************************************************************************************
*                                            HTTPs_ValReq()
*
* Description : Called for each ${TEXT_STRING} embedded variable found in a HTML file.
*
* Argument(s) : var        string containing the name of the HTML embedded variable.
*               val        pointer to the string containing the value of the HTML embedded variable.
*               max_size   maximum size allowed for the value.
*
* Return(s)   : Application should set the return value to:
*                   DEF_FAIL        variable doesn't exist of value too long.
*                   DEF_OK          val returned successfully.
*
* Caller(s)   : HTTPs_ProcessHTMLFile().
*
* Note(s)     : This function is called by the server as it is parsing an outgoing HTML file.  If it
*               detects the ${TEXT_STRING} syntax, it calls this function with varname pointing to the
*               TEXT_STRING.  Application should set the value pointer to a application-allocated buffer
*               containing the value, and set the length of the value as the return value.  The
*               replacement text used here is 100% application specific.  Buffer is not modified.
*********************************************************************************************************
*/

CPU_BOOLEAN  HTTPs_ValReq (CPU_CHAR     *var,
                           CPU_CHAR    **val,
                           CPU_INT32U    max_size);


/*
*********************************************************************************************************
*                                             HTTPs_ValRx()
*
* Description : Called for each variable received from a HTTP POST command.
*
* Argument(s) : var         string containing the name  of the HTTP POST variable.
*               val         string containing the value of the HTTP POST variable.
*
* Return(s)   : Application should set the return value to:
*                   DEF_FAIL        data process failed.
*                   DEF_OK          data process successfull.
*
* Caller(s)   : HTTPs_ProcessCGIList().
*
* Note(s)     : This function is called by the server as it is processing any list of name/value pairs
*               in a form reponse.  This is where the application puts all of the "actions" that must
*               occur as a result of a client interacting with a form.  The name and value are incoming
*               ASCII and it is 100% application specific code that deals with these name/value pairs.
*********************************************************************************************************
*/

CPU_BOOLEAN  HTTPs_ValRx (CPU_CHAR  *var,
                          CPU_CHAR  *val);


/*
*********************************************************************************************************
*                                       RTOS INTERFACE FUNCTIONS
*                                           (see http-s_os.c)
*********************************************************************************************************
*/

CPU_BOOLEAN  HTTPs_OS_Init        (void  *p_arg);
void         HTTPs_OS_TaskSuspend (void);
void         HTTPs_OS_TxDly       (void);


/*
*********************************************************************************************************
*                                              TRACING
*********************************************************************************************************
*/

                                                                /* Trace level, default to TRACE_LEVEL_OFF              */
#ifndef  TRACE_LEVEL_OFF
#define  TRACE_LEVEL_OFF                                 0
#endif

#ifndef  TRACE_LEVEL_INFO
#define  TRACE_LEVEL_INFO                                1
#endif

#ifndef  TRACE_LEVEL_DBG
#define  TRACE_LEVEL_DBG                                 2
#endif

#ifndef  HTTPs_TRACE_LEVEL
#define  HTTPs_TRACE_LEVEL                      TRACE_LEVEL_OFF
#endif

#ifndef  HTTPs_TRACE
#define  HTTPs_TRACE                            printf
#endif

#define  HTTPs_TRACE_INFO(x)                  ((HTTPs_TRACE_LEVEL >= TRACE_LEVEL_INFO) ? (void)(HTTPs_TRACE x) : (void)0)
#define  HTTPs_TRACE_DBG(x)                   ((HTTPs_TRACE_LEVEL >= TRACE_LEVEL_DBG)  ? (void)(HTTPs_TRACE x) : (void)0)


/*
*********************************************************************************************************
*                                         CONFIGURATION ERRORS
*********************************************************************************************************
*/

                                                                /* Task name for debugging purposes.                    */
#ifndef  HTTPs_OS_CFG_TASK_NAME
#error  "HTTPs_OS_CFG_TASK_NAME                 illegally #define'd in 'app_cfg.h'"
#error  "                                       see template file in package      "
#error  "                                       named 'http-s_cfg.h'              "
#endif

                                                                /* Task priority.                                       */
#ifndef  HTTPs_OS_CFG_TASK_PRIO
#error  "HTTPs_OS_CFG_TASK_PRIO                 illegally #define'd in 'app_cfg.h'"
#error  "                                       see template file in package      "
#error  "                                       named 'http-s_cfg.h'              "
#endif

                                                                /* Task stack size.                                     */
#ifndef  HTTPs_OS_CFG_TASK_STK_SIZE
#error  "HTTPs_OS_CFG_TASK_STK_SIZE             illegally #define'd in 'app_cfg.h'"
#error  "                                       see template file in package      "
#error  "                                       named 'http-s_cfg.h'              "
#endif

                                                                /* HTTP server IP port.  Default is 80.                 */
#ifndef  HTTPs_CFG_IPPORT
#error  "HTTPs_CFG_IPPORT                       illegally #define'd in 'app_cfg.h'"
#error  "                                       see template file in package      "
#error  "                                       named 'http-s_cfg.h'              "
#endif

                                                                /* Maximum inactivity time (s) on ACCEPT.               */
#ifndef  HTTPs_CFG_MAX_ACCEPT_TIMEOUT_S
#error  "HTTPs_CFG_MAX_ACCEPT_TIMEOUT_S         illegally #define'd in 'app_cfg.h'"
#error  "                                       see template file in package      "
#error  "                                       named 'http-s_cfg.h'              "
#endif

                                                                /* Maximum inactivity time (s) on RX.                   */
#ifndef  HTTPs_CFG_MAX_RX_TIMEOUT_S
#error  "HTTPs_CFG_MAX_RX_TIMEOUT_S             illegally #define'd in 'app_cfg.h'"
#error  "                                       see template file in package      "
#error  "                                       named 'http-s_cfg.h'              "
#endif

                                                                /* Maximum inactivity time (s) on TX.                   */
#ifndef  HTTPs_CFG_MAX_TX_TIMEOUT_S
#error  "HTTPs_CFG_MAX_TX_TIMEOUT_S             illegally #define'd in 'app_cfg.h'"
#error  "                                       see template file in package      "
#error  "                                       named 'http-s_cfg.h'              "
#endif

                                                                /* Maximum number of retries on ACCEPT.                 */
#ifndef  HTTPs_CFG_MAX_ACCEPT_RETRY
#error  "HTTPs_CFG_MAX_ACCEPT_RETRY             illegally #define'd in 'app_cfg.h'"
#error  "                                       see template file in package      "
#error  "                                       named 'http-s_cfg.h'              "
#endif

                                                                /* Maximum number of retries on RX.                     */
#ifndef  HTTPs_CFG_MAX_RX_RETRY
#error  "HTTPs_CFG_MAX_RX_RETRY                 illegally #define'd in 'app_cfg.h'"
#error  "                                       see template file in package      "
#error  "                                       named 'http-s_cfg.h'              "
#endif

                                                                /* Maximum number of retries on TX.                     */
#ifndef  HTTPs_CFG_MAX_TX_RETRY
#error  "HTTPs_CFG_MAX_TX_RETRY                 illegally #define'd in 'app_cfg.h'"
#error  "                                       see template file in package      "
#error  "                                       named 'http-s_cfg.h'              "
#endif

                                                                /* Root path for HTTP document in filesystem.           */
                                                                /* Filesystem-specific symbols can be used.             */
#ifndef  HTTPs_CFG_FS_ROOT
#error  "HTTPs_CFG_FS_ROOT                      illegally #define'd in 'app_cfg.h'"
#error  "                                       see template file in package      "
#error  "                                       named 'http-s_cfg.h'              "
#endif

                                                                /* Default file to load if no filename specified in URL.*/
#ifndef  HTTPs_CFG_DFLT_FILE
#error  "HTTPs_CFG_DFLT_FILE                    illegally #define'd in 'app_cfg.h'"
#error  "                                       see template file in package      "
#error  "                                       named 'http-s_cfg.h'              "
#endif

                                                                /* Maximum variable length in HTML pages for dynamic    */
                                                                /* replacement (GET) or for POST requests.              */
#ifndef  HTTPs_CFG_MAX_VAR_LEN
#error  "HTTPs_CFG_MAX_VAR_LEN                  illegally #define'd in 'app_cfg.h'"
#error  "                                       see template file in package      "
#error  "                                       named 'http-s_cfg.h'              "
#endif

                                                                /* Maximum value length in HTML pages for dynamic       */
                                                                /* replacement (GET) or for POST requests.              */
#ifndef  HTTPs_CFG_MAX_VAL_LEN
#error  "HTTPs_CFG_MAX_VAL_LEN                  illegally #define'd in 'app_cfg.h'"
#error  "                                       see template file in package      "
#error  "                                       named 'http-s_cfg.h'              "
#endif

                                                                /* Default HTML document returned when the requested    */
                                                                /* HTML document is not found (HTTP error #404).        */
#ifndef  HTTPs_CFG_ERR_MSG_HTML_NOT_FOUND
#error  "HTTPs_CFG_ERR_MSG_HTML_NOT_FOUND       illegally #define'd in 'app_cfg.h'"
#error  "                                       see template file in package      "
#error  "                                       named 'http-s_cfg.h'              "
#endif


/*
*********************************************************************************************************
*                                              MODULE END
*********************************************************************************************************
*/

#endif  /* __HTTP_S_H__ */
	 	 			 		    	 				 	    	 	 	 		    	     	 	 	 		 	  	  	  	     	 	      	   		 	 	 	   		   			 	     			  	 	 		   	 			       	  	 	 	 	   	  		 	 	  		 		  	 	 					 	 	 	   	   	  		 	 	 			 	    		  	  			   	  		 				 		 					 	  	  	 	 				 		 	 		 		 	 	  		  	  			 				 		 
